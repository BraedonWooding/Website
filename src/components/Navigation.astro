---
import { DarkMode } from 'accessible-astro-components'
---

<div id="main-navigation" class="is-desktop padding-16 color-neutral">
  <div class="container">
    <a href="/">
      <img src={(await import('../assets/img/logo.svg')).default} alt="Your Logo">
    </a>
    <div class="wrapper">
      <nav class="desktop-menu">
        <ul>
          <slot />
        </ul>
      </nav>
      <DarkMode client:load />
    </div>
    <nav class="mobile-menu">
      <ul>
        <slot />
      </ul>
      </nav>
  </div>
</div>

<script>
  // variables
  const mainNav = document.querySelector('#main-navigation')
  const mainMenu = mainNav.querySelector('ul')
  const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')]
  // functions
  const setActiveMenuItem = () => {
    const menuItems = [...mainMenu.querySelectorAll('a:not([rel*="external"])')]
    menuItems.forEach(menuItem => {
      if (menuItem.pathname === window.location.pathname) {
        menuItem.classList.add('is-active')
        menuItem.setAttribute('aria-current', 'page')
      }
    })
  }
  const checkMenuSize = () => {
    const mainNavWidth = mainNav.getBoundingClientRect().width
    const desktopMenuWidth = document.querySelector('.desktop-menu').getBoundingClientRect().width
    const logoWidthBuffer = 300
    const totalMenuWidth = parseInt(desktopMenuWidth) + logoWidthBuffer
    if (totalMenuWidth >= mainNavWidth) {
      mainNav.classList.remove('is-desktop')
      mainNav.classList.add('is-mobile')
    } else if (totalMenuWidth <= mainNavWidth) {
      mainNav.classList.add('is-desktop')
      mainNav.classList.remove('is-mobile')
    }
  }
  const isOutOfViewport = element => {
    const elementBounds = element.getBoundingClientRect()
    return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth)
  }
  const openDropdownMenu = dropdownMenu => {
    const dropdownList = dropdownMenu.parentNode.querySelector('ul')
    dropdownMenu.classList.add('show')
    dropdownMenu.setAttribute('aria-expanded', 'true')
    if (isOutOfViewport(dropdownList)) {
      dropdownList.style.left = 'auto'
    }
  }
  const closeDropdownMenu = dropdownMenu => {
    dropdownMenu.classList.remove('show')
    dropdownMenu.setAttribute('aria-expanded', 'false')
  }
  const closeAllDropdownMenus = () => {
    for (let i = 0; i < dropdownMenus.length; i++) {
      closeDropdownMenu(dropdownMenus[i])
    }
  }
  const toggleDropdownMenu = event => {
    if (event.target.getAttribute('aria-expanded') === 'false') {
      closeAllDropdownMenus()
      openDropdownMenu(event.target)
    } else {
      closeDropdownMenu(event.target)
    }
  }
  // execution
  mainMenu && mainMenu.addEventListener('keydown', event => {
    const currentMenuItem = event.target.closest('li')
    const menuItems = [...mainMenu.querySelectorAll('.menu-item')]
    const currentDropdownMenu = event.target.closest('.has-dropdown button')
    const currentDropdownMenuItem = event.target.closest('.has-dropdown li')
    const currentIndex = menuItems.findIndex(item => item === currentMenuItem)
    const key = event.key
    let targetItem
    if (key === 'ArrowRight') {
      if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
        targetItem = menuItems[0]
      } else {
        targetItem = menuItems[currentIndex + 1]
      }
    }
    if (key === 'ArrowLeft') {
      if (menuItems.indexOf(currentMenuItem) === 0) {
        targetItem = menuItems[menuItems.length - 1]
      } else {
        targetItem = menuItems[currentIndex - 1]
      }
    }
    if (key === 'Escape') {
      targetItem = menuItems[0]
    }
    if (currentDropdownMenu) {
      const firstDropdownItem = currentDropdownMenu.nextElementSibling.querySelector('li')
      if (key === 'ArrowDown') {
        event.preventDefault()
        openDropdownMenu(currentDropdownMenu)
        targetItem = firstDropdownItem
      }
      if (key === 'Escape') {
        closeDropdownMenu(currentDropdownMenu)
      }
    }
    if (currentDropdownMenuItem) {
      const currentDropdownList = currentDropdownMenuItem.parentNode
      const dropdownMenuItems = [...currentDropdownList.querySelectorAll('li')]
      const currentIndex = dropdownMenuItems.findIndex(item => item === currentDropdownMenuItem)
      if (key === 'ArrowDown') {
        event.preventDefault()
        if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === dropdownMenuItems.length - 1) {
          targetItem = dropdownMenuItems[0]
        } else {
          targetItem = dropdownMenuItems[currentIndex + 1]
        }
      }
      if (key === 'ArrowUp') {
        event.preventDefault()
        if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === 0) {
          targetItem = dropdownMenuItems[dropdownMenuItems.length - 1]
        } else {
          targetItem = dropdownMenuItems[currentIndex - 1]
        }
      }
      if (key === 'Escape') {
        const currentDropdownMenu = currentDropdownList.previousElementSibling
        targetItem = currentDropdownMenu.parentNode
        closeAllDropdownMenus()
      }
    }
    if (targetItem) {
      targetItem.querySelector('a, button, input').focus()
    }
  })
  dropdownMenus && dropdownMenus.forEach(dropdownMenu => {
    dropdownMenu.addEventListener('click', toggleDropdownMenu)
  })
  setActiveMenuItem()
  checkMenuSize()
  window.addEventListener('resize', checkMenuSize)
  window.addEventListener('click', event => {
    if (!event.target.hasAttribute('aria-haspopup') && !event.target.classList.contains('submenu-item')) {
      closeAllDropdownMenus()
    }
  })
</script>
